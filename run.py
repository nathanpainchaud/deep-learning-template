import logging
import os

import hydra
import pytorch_lightning as pl
from hydra.utils import instantiate
from omegaconf import DictConfig, OmegaConf

from deep_learning_tutorials import BaseDataModule, BaseTask
from deep_learning_tutorials.core import initialization as init
from deep_learning_tutorials.utils.config import freeze_config

os.environ["HYDRA_FULL_ERROR"] = "1"

log = logging.getLogger(__name__)


@hydra.main(config_path="conf", config_name="config")
def main(cfg: DictConfig) -> None:
    """Hydra application's main function, that builds the model and trains/tests it on the dataset.

    Args:
        cfg: Application-wide configuration generated by Hydra.
    """
    freeze_config(cfg)
    log.info(f"Hydra app running with config: \n{OmegaConf.to_yaml(cfg)}")
    init.validate_cfg(cfg)

    trainer: pl.Trainer = instantiate(cfg.trainer.trainer, logger=init.initialize_loggers(cfg))
    data_module: BaseDataModule = instantiate(cfg.datamodule.datamodule)
    task: BaseTask = init.initialize_task(cfg, data_module)

    if cfg.trainer.train:
        trainer.fit(task, datamodule=data_module)
        log.info("Training complete.")

    if cfg.trainer.test:
        trainer.test(task, datamodule=data_module)
        log.info("Testing complete.")


if __name__ == "__main__":
    main()
